# Generated by Django 4.1.5 on 2023-02-09 01:20

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiscordUserInfo',
            fields=[
                ('id', models.BigIntegerField(help_text="Discord user's ID returned from Discord, also acts as model primary key.", primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(help_text='Combination of Discord Username and Discriminator, separated by a # sign.', max_length=100, verbose_name='Discord Tag')),
                ('pub_flags', models.IntegerField(help_text='Public flags for this Discord user returned from Discord.', verbose_name='Public Flags')),
                ('flags', models.IntegerField(help_text='Flags for this Discord user returned from Discord.', verbose_name='Flags')),
                ('locale', models.CharField(help_text="Discord user's locale.", max_length=100, verbose_name='Locale')),
                ('mfa_enabled', models.BooleanField(help_text='Whether this user has multi-factor authentication enabled on their Discord account.', verbose_name='MFA Enabled')),
                ('avatar_string', models.CharField(help_text='String returned from Discord, for fetching Avatar image.', max_length=200, null=True, verbose_name='Avatar String')),
            ],
            options={
                'verbose_name': 'User - Discord Information',
                'verbose_name_plural': 'Users - Discord Information',
            },
        ),
        migrations.CreateModel(
            name='UserProfileInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture_changed_manually', models.BooleanField(default=False, help_text='Indicates whether a user has manually changed their profile picture or not.', null=True, verbose_name='Picture has been changed manually')),
                ('profile_picture', models.ImageField(blank=True, help_text="A user's profile picture, uploaded and stored locally.", upload_to='profile_pictures', verbose_name='Profile Picture')),
                ('minecraft_username', models.CharField(blank=True, help_text="A user's Minecraft Username.", max_length=50, verbose_name='Minecraft Username')),
                ('favorite_modpack', models.CharField(blank=True, help_text="A user's favorite Minecraft modpack.", max_length=80, verbose_name='Favorite Modpack')),
            ],
            options={
                'verbose_name': 'User - Extra Information',
                'verbose_name_plural': 'Users - Extra Information',
            },
        ),
        migrations.CreateModel(
            name='RaptorUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_slug', models.SlugField(help_text="A user's username that has been converted to a slug/URL friendly format.", null=True, verbose_name='User Slug')),
                ('is_discord_user', models.BooleanField(default=False, help_text='Indicates whether a user registered their account using Discord.', verbose_name='Is a Discord User')),
                ('discord_user_info', models.OneToOneField(blank=True, help_text="A User's Discord user information, stored in a separate model. This field will/should not be populated for users that did not register with Discord.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discordinfo', to='authprofiles.discorduserinfo', verbose_name='Discord User Information')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('user_profile_info', models.OneToOneField(blank=True, help_text="A User's extra profile information, stored in separate model.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profileinfo', to='authprofiles.userprofileinfo', verbose_name='User Profile Information')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
